from enum import Enum
from typing import Any, Callable, Iterable, Tuple
import numpy as np

from classes.value_generators.value_generators import (
    create_fill_generator,
    in_range_value_generator,
    out_of_range_value_generator,
    flip_mask_generator
)


class ValueClass(Enum):
    """
    ``Enum`` containing all the classes of faulty values.
    """

    ZERO = (1, "zero", create_fill_generator(0.0))
    """
    The golden values is replaced with a 0
    """
    IN_RANGE = (2, "in_range", in_range_value_generator)
    """
    The golden values is replaced with an uniform value between the range of usual values at the output of the layer.
    The range of usual values varies from layer to layer.
    """
    OUT_OF_RANGE = (3, "out_of_range", out_of_range_value_generator)
    """
    The golden values is replaced with a values outside from the range of usual values at the output of the layer.
    The value is generated by extracting a random bitstring that is reinterpreted as a float value outside of the usual rangte.
    The range of usual values varies from layer to layer.
    """
    NAN = (4, "nan", create_fill_generator(np.nan))
    """
    The golden values is replaced with a ``NaN``
    """
    FLIP = (5, "flip", flip_mask_generator)
    """
    A bit of the golden values is flipped. (Mapped to out of range due to rarity)
    """

    def __init__(
        self,
        type_id: int,
        display_name: str,
        generator_function: Callable,
    ):
        self.type_id = type_id
        self.display_name = display_name
        self.generator_function = generator_function

    def generate_values(
        self,
        output_shape: Iterable[int],
        value_range=np.array([-30.0, 30.0], dtype=np.float32),
        dtype=None,
    ):
        return self.generator_function(value_range, output_shape, dtype)
    
    @staticmethod
    def from_display_name(display_name : str):
        """
        Get the ``ValueClass`` corresponding to a display name

        Args
        ----
        * ``display_name : str``. The display name of the class to be generated (Case insensitive)

        Returns
        ----
        The ``ValueClass`` object that has a display name equal to ``display_name`` (ignoring case), if it exists

        Raises
        ----
        ``KeyError`` if there is no ``ValueClass`` with that display name
        """
        return ValueClass[display_name.upper()]

    def __str__(self) -> str:
        return f"value_class_{self.display_name}"
